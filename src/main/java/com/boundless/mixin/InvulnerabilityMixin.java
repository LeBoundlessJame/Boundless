package com.boundless.mixin;

import com.boundless.registry.StatusEffectRegistry;
import net.minecraft.entity.damage.DamageSource;
import net.minecraft.entity.effect.StatusEffect;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.registry.entry.RegistryEntry;
import net.minecraft.registry.tag.DamageTypeTags;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

@Mixin(PlayerEntity.class)
public class InvulnerabilityMixin {
    @Inject(at = @At("HEAD"), method = "damage", cancellable = true)
    public void boundless$damage(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir) {
        PlayerEntity player = (PlayerEntity) (Object) this;
        if (!source.isIn(DamageTypeTags.BYPASSES_INVULNERABILITY) && player.hasStatusEffect(StatusEffectRegistry.INVULNERABILITY_EFFECT)) cir.setReturnValue(false);
    }
}
